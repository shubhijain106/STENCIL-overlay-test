/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  IconStateType,
  IconType,
} from './components/icon/model';
import {
  TestModalType,
} from './components/test-modal/model';

export namespace Components {
  interface TestIcon {
    /**
    * Determines if icon is disabled
    * @type {boolean}
    * @default false
    */
    'isDisabled'?: boolean;
    /**
    * Determines state of icon e.g. primary
    * @type {IconStateType}
    * @default 'non-action'
    */
    'state'?: IconStateType;
    /**
    * Determines type of icon e.g. settings
    * @type {IconType}
    * @default undefined
    */
    'type': IconType;
  }
  interface TestModal {
    /**
    * This method allows for the closing of modal
    */
    'close': () => Promise<void>;
    /**
    * When true, It would override existing footer with the custom footer
    * @type {boolean}
    * @default false
    */
    'hasCustomFooter'?: boolean;
    /**
    * When true, It would override existing header with the custom header
    * @type {boolean}
    * @default false
    */
    'hasCustomHeader'?: boolean;
    /**
    * A property that determines if the background-color of this modal content should be grey or white.
    * @default 'false'
    * @type {boolean}
    */
    'hasGreyContentArea'?: boolean;
    /**
    * A property that sets the header of this modal.
    * @default 'Warning'
    * @type {string}
    */
    'header'?: string;
    /**
    * A property that determines if the size of this modal should be large or not.
    * @default 'false'
    * @type {boolean}
    */
    'isLarge'?: boolean;
    /**
    * When true, opens the modal
    * @type {boolean}
    * @default false
    */
    'isOpen': boolean;
    /**
    * This method allows for the opening of modal
    */
    'open': () => Promise<void>;
    /**
    * A property that sets the type of this modal.
    * @default 'information'
    * @type {ModalType}
    */
    'type'?: TestModalType;
  }
  interface TestPopover {
    /**
    * This method closes the popover
    * @returns
    */
    'close': () => Promise<void>;
    /**
    * This property sets if popover has a closing icon
    * @type {boolean}
    * @default true
    */
    'hasCloseIcon'?: boolean;
    /**
    * This property determines header name inside popover
    */
    'header'?: string;
    /**
    * This property determines whether or not the popover is dismissable with a click inside popover
    */
    'hideWithInsideClick'?: boolean;
    /**
    * This property determines if popover styling should be of a data-point popover. Is for numbers/text only
    */
    'isDataPoint'?: boolean;
    /**
    * When true, opens the popover overlay
    * @type {boolean}
    * @default false
    */
    'isOpen': boolean;
    /**
    * This method opens the popover
    * @returns
    */
    'open': () => Promise<void>;
    /**
    * This property can be used to override the padding of a popover. To be used in special cases only.
    * @type {number}
    * @default undefined
    */
    'padding'?: number;
    /**
    * This property specifies the source element and can be used to pass components dynamically when we can't use slot
    * @default undefined
    */
    'sourceElement'?: any;
    /**
    * This property determines element on which popover is shown
    */
    'target': string;
    /**
    * This property specifies the target element and can be used to pass components dynamically when we can't use slot
    * @default undefined
    */
    'targetElement'?: any;
    /**
    * This property determines when to show popover. Can be either on hover or pressed
    */
    'trigger'?: string;
    /**
    * This method is used to render the popover with sufficient spacing within the given viewport
    * @returns
    */
    'updatePosition': () => Promise<boolean>;
  }
}

declare global {


  interface HTMLTestIconElement extends Components.TestIcon, HTMLStencilElement {}
  var HTMLTestIconElement: {
    prototype: HTMLTestIconElement;
    new (): HTMLTestIconElement;
  };

  interface HTMLTestModalElement extends Components.TestModal, HTMLStencilElement {}
  var HTMLTestModalElement: {
    prototype: HTMLTestModalElement;
    new (): HTMLTestModalElement;
  };

  interface HTMLTestPopoverElement extends Components.TestPopover, HTMLStencilElement {}
  var HTMLTestPopoverElement: {
    prototype: HTMLTestPopoverElement;
    new (): HTMLTestPopoverElement;
  };
  interface HTMLElementTagNameMap {
    'test-icon': HTMLTestIconElement;
    'test-modal': HTMLTestModalElement;
    'test-popover': HTMLTestPopoverElement;
  }
}

declare namespace LocalJSX {
  interface TestIcon {
    /**
    * Determines if icon is disabled
    * @type {boolean}
    * @default false
    */
    'isDisabled'?: boolean;
    /**
    * Determines state of icon e.g. primary
    * @type {IconStateType}
    * @default 'non-action'
    */
    'state'?: IconStateType;
    /**
    * Determines type of icon e.g. settings
    * @type {IconType}
    * @default undefined
    */
    'type'?: IconType;
  }
  interface TestModal {
    /**
    * When true, It would override existing footer with the custom footer
    * @type {boolean}
    * @default false
    */
    'hasCustomFooter'?: boolean;
    /**
    * When true, It would override existing header with the custom header
    * @type {boolean}
    * @default false
    */
    'hasCustomHeader'?: boolean;
    /**
    * A property that determines if the background-color of this modal content should be grey or white.
    * @default 'false'
    * @type {boolean}
    */
    'hasGreyContentArea'?: boolean;
    /**
    * A property that sets the header of this modal.
    * @default 'Warning'
    * @type {string}
    */
    'header'?: string;
    /**
    * A property that determines if the size of this modal should be large or not.
    * @default 'false'
    * @type {boolean}
    */
    'isLarge'?: boolean;
    /**
    * When true, opens the modal
    * @type {boolean}
    * @default false
    */
    'isOpen'?: boolean;
    /**
    * This event emits when modal is closed.
    */
    'onModalClosed'?: (event: CustomEvent<any>) => void;
    /**
    * This event emits when modal is opened.
    */
    'onModalOpened'?: (event: CustomEvent<any>) => void;
    /**
    * A property that sets the type of this modal.
    * @default 'information'
    * @type {ModalType}
    */
    'type'?: TestModalType;
  }
  interface TestPopover {
    /**
    * This property sets if popover has a closing icon
    * @type {boolean}
    * @default true
    */
    'hasCloseIcon'?: boolean;
    /**
    * This property determines header name inside popover
    */
    'header'?: string;
    /**
    * This property determines whether or not the popover is dismissable with a click inside popover
    */
    'hideWithInsideClick'?: boolean;
    /**
    * This property determines if popover styling should be of a data-point popover. Is for numbers/text only
    */
    'isDataPoint'?: boolean;
    /**
    * When true, opens the popover overlay
    * @type {boolean}
    * @default false
    */
    'isOpen'?: boolean;
    /**
    * This event is emitted when the popover is closed
    */
    'onPopoverClosed'?: (event: CustomEvent<any>) => void;
    /**
    * This event is emitted when the popover is opened
    */
    'onPopoverOpened'?: (event: CustomEvent<any>) => void;
    /**
    * This property can be used to override the padding of a popover. To be used in special cases only.
    * @type {number}
    * @default undefined
    */
    'padding'?: number;
    /**
    * This property specifies the source element and can be used to pass components dynamically when we can't use slot
    * @default undefined
    */
    'sourceElement'?: any;
    /**
    * This property determines element on which popover is shown
    */
    'target'?: string;
    /**
    * This property specifies the target element and can be used to pass components dynamically when we can't use slot
    * @default undefined
    */
    'targetElement'?: any;
    /**
    * This property determines when to show popover. Can be either on hover or pressed
    */
    'trigger'?: string;
  }

  interface IntrinsicElements {
    'test-icon': TestIcon;
    'test-modal': TestModal;
    'test-popover': TestPopover;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'test-icon': LocalJSX.TestIcon & JSXBase.HTMLAttributes<HTMLTestIconElement>;
      'test-modal': LocalJSX.TestModal & JSXBase.HTMLAttributes<HTMLTestModalElement>;
      'test-popover': LocalJSX.TestPopover & JSXBase.HTMLAttributes<HTMLTestPopoverElement>;
    }
  }
}


