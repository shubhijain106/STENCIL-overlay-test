/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  TestModalType,
} from './components/test-modal/model';

export namespace Components {
  interface TestModal {
    /**
    * This method allows for the closing of modal
    */
    'close': () => Promise<void>;
    /**
    * When true, It would override existing footer with the custom footer
    * @type {boolean}
    * @default false
    */
    'hasCustomFooter'?: boolean;
    /**
    * When true, It would override existing header with the custom header
    * @type {boolean}
    * @default false
    */
    'hasCustomHeader'?: boolean;
    /**
    * A property that determines if the background-color of this modal content should be grey or white.
    * @default 'false'
    * @type {boolean}
    */
    'hasGreyContentArea'?: boolean;
    /**
    * A property that sets the header of this modal.
    * @default 'Warning'
    * @type {string}
    */
    'header'?: string;
    /**
    * A property that determines if the size of this modal should be large or not.
    * @default 'false'
    * @type {boolean}
    */
    'isLarge'?: boolean;
    /**
    * When true, opens the modal
    * @type {boolean}
    * @default false
    */
    'isOpen': boolean;
    /**
    * This method allows for the opening of modal
    */
    'open': () => Promise<void>;
    /**
    * A property that sets the type of this modal.
    * @default 'information'
    * @type {ModalType}
    */
    'type'?: TestModalType;
  }
}

declare global {


  interface HTMLTestModalElement extends Components.TestModal, HTMLStencilElement {}
  var HTMLTestModalElement: {
    prototype: HTMLTestModalElement;
    new (): HTMLTestModalElement;
  };
  interface HTMLElementTagNameMap {
    'test-modal': HTMLTestModalElement;
  }
}

declare namespace LocalJSX {
  interface TestModal {
    /**
    * When true, It would override existing footer with the custom footer
    * @type {boolean}
    * @default false
    */
    'hasCustomFooter'?: boolean;
    /**
    * When true, It would override existing header with the custom header
    * @type {boolean}
    * @default false
    */
    'hasCustomHeader'?: boolean;
    /**
    * A property that determines if the background-color of this modal content should be grey or white.
    * @default 'false'
    * @type {boolean}
    */
    'hasGreyContentArea'?: boolean;
    /**
    * A property that sets the header of this modal.
    * @default 'Warning'
    * @type {string}
    */
    'header'?: string;
    /**
    * A property that determines if the size of this modal should be large or not.
    * @default 'false'
    * @type {boolean}
    */
    'isLarge'?: boolean;
    /**
    * When true, opens the modal
    * @type {boolean}
    * @default false
    */
    'isOpen'?: boolean;
    /**
    * This event emits when modal is closed.
    */
    'onModalClosed'?: (event: CustomEvent<any>) => void;
    /**
    * This event emits when modal is opened.
    */
    'onModalOpened'?: (event: CustomEvent<any>) => void;
    /**
    * A property that sets the type of this modal.
    * @default 'information'
    * @type {ModalType}
    */
    'type'?: TestModalType;
  }

  interface IntrinsicElements {
    'test-modal': TestModal;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'test-modal': LocalJSX.TestModal & JSXBase.HTMLAttributes<HTMLTestModalElement>;
    }
  }
}


